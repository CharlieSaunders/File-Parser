File Parser: Alpha.01

INDEX:
1 - Basic Information
    1.1 Decription
    1.2 Use Case

2 - Config
    2.1 Accessible Parameters
    2.2 Usage

3 - Return examples
    3.1 Using data.txt supplied

4 - Changelog

5 - Potential Updates

//////////////////////////////
1 
//////////////////////////////

=> 1.1 Description
    The File Parser takes a file given and iterates through the data in the file then returns the data in an object
    contianing the associated rows in the csv as an array. 
    The data itself is not changed, examined or stored externally. This data is 'read' in order to understand where 
    the delimiter is to seperate however we make no attempt to actually use the data in any way other than to parse.

=> 1.2 Use Case
    As a person wanting to seperate a text file into more manageable, clear and delimited chunks
    I want to be able to give a file and return the data in arrays formed from a delimiter of my choice
    So that I can complete further work on the data easily.

//////////////////////////////
2
//////////////////////////////        

=> 2.1 Accessible Parameters:
    File Parser takes 3 current params (* is mandatory): 
    *1) filelist containing a single file (any format atm). 
    *2) a bool for parsing row 0. True says that you want to parse row 0 and include this in your data returned. 
        Since many CSV's have headers this was required.
    3) Delimiter, what to seperate on by default set to new line; '\n', can be overwritten.

=> 2.2 Usage:

    Best usage would be to point a button or input update / on change to this function. 
        <input type="file" onchange="function_name(this.files)"/>

    YOUR FUNCTION is an example function, this can be changed to suit whatever you wish to do with the data. 500 is
    the wait time for the function, increase this if you are returned undefined indexes in arrays when trying to
    access them. 

    Which would then point to:
        let data = [];
        returned_data = (files) => {
            data = file_parser(files, false);
            setTimeout(function(){ YOUR FUNCTION (data)}, 500)
        }

        if YOUR FUNCTION was a console.log(data[0]) you would see index 0 returned in data.

//////////////////////////////
3
//////////////////////////////  

=> 3.1 Using Data.txt supplied
    After setting up the function download the Data.txt to run through some test examples. This file contains a extract from a chat message; converted to lorem ipsum.
    It contains 3 messages over 5 lines.

    When we run this through the parser with the following:
        csv_parser(files, false)

    We are asking it to use the following- file from select file form, ignore the first line in the CSV, default delimiter which is '\n'. We are returned 
    in console:
        (4) [Array(15), Array(25), Array(4), Array(21)]

    If we then amend the delimter to '[' => csv_parser(files, false, '[') we are returned in console:
        (3) [Array(18), Array(28), Array(21)]

    Finally to test that it is indeed reading from line 1 in the above and ignoring the headers csv_parser(files, true)
        (5) [Array(12), Array(15), Array(25), Array(4), Array(21)]
        in which
        0: (12) ["header1,", "header2,", "header3,", "header4,", "header5,", "header6,", "header7,", "header8,", "header9,", "header10,", "header11,", "header12"]

    If you get the above responses in console then it is working as intended.

//////////////////////////////
4       CHANGELOG
//////////////////////////////  

02/06/2020
Functionality:
    Removed unused or unneeded statements to increase execution time. 
    Cleaned up variable names 
    Amended Data.txt to include faux headers to aid in representing the return_0 param.

Added:
    Added set timeout in the core function due to asynch calls.


Removed:
    Removed debugging to bring back in a future update more cleanly.
    Removed Mode as per above
END

31/05/2020 File Parser Alpha.01 -- Initial Update
    Added all base files
    Added readme
    Added License
END
//////////////////////////////
5       Potential Updates
////////////////////////////// 
* WIP currently


*Create clean debugging
*Add in ability to handle escaped characters/strings.
*Investigate alternate to the async waiting. Potential promise instead.
Validation that all cells have been filled if required.
